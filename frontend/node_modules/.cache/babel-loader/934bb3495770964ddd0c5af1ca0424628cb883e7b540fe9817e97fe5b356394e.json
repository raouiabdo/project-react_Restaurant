{"ast":null,"code":"'use client';\n\nimport useForkRef from '@mui/utils/useForkRef';\nimport appendOwnerState from '@mui/utils/appendOwnerState';\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\nimport mergeSlotProps from '@mui/utils/mergeSlotProps';\n/**\r\n * An internal function to create a Material UI slot.\r\n *\r\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\r\n * while Base UI does not need to support leaf component customization.\r\n *\r\n * @param {string} name: name of the slot\r\n * @param {object} parameters\r\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\r\n *\r\n * Note: the returned slot's props\r\n * - will never contain `component` prop.\r\n * - might contain `as` prop.\r\n */\nexport default function useSlot(\n/**\r\n * The slot's name. All Material UI components should have `root` slot.\r\n *\r\n * If the name is `root`, the logic behaves differently from other slots,\r\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\r\n */\nname, parameters) {\n  const {\n    className,\n    elementType: initialElementType,\n    ownerState,\n    externalForwardedProps,\n    internalForwardedProps,\n    ...useSlotPropsParams\n  } = parameters;\n  const {\n    component: rootComponent,\n    slots = {\n      [name]: undefined\n    },\n    slotProps = {\n      [name]: undefined\n    },\n    ...other\n  } = externalForwardedProps;\n  const elementType = slots[name] || initialElementType;\n\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\n  // `resolvedComponentsProps` is always a plain object.\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\n  const {\n    props: {\n      component: slotComponent,\n      ...mergedProps\n    },\n    internalRef\n  } = mergeSlotProps({\n    className,\n    ...useSlotPropsParams,\n    externalForwardedProps: name === 'root' ? other : undefined,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\n  const props = appendOwnerState(elementType, {\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\n    ...mergedProps,\n    ...(LeafComponent && {\n      as: LeafComponent\n    }),\n    ref\n  }, ownerState);\n  return [elementType, props];\n}","map":{"version":3,"names":["useForkRef","appendOwnerState","resolveComponentProps","mergeSlotProps","useSlot","name","parameters","className","elementType","initialElementType","ownerState","externalForwardedProps","internalForwardedProps","useSlotPropsParams","component","rootComponent","slots","undefined","slotProps","other","resolvedComponentsProps","props","slotComponent","mergedProps","internalRef","externalSlotProps","ref","LeafComponent","as"],"sources":["C:/Users/asus/Desktop/developpement Num√©rique/project-react_Restaurant/frontend/node_modules/@mui/material/utils/useSlot.js"],"sourcesContent":["'use client';\r\n\r\nimport useForkRef from '@mui/utils/useForkRef';\r\nimport appendOwnerState from '@mui/utils/appendOwnerState';\r\nimport resolveComponentProps from '@mui/utils/resolveComponentProps';\r\nimport mergeSlotProps from '@mui/utils/mergeSlotProps';\r\n/**\r\n * An internal function to create a Material UI slot.\r\n *\r\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\r\n * while Base UI does not need to support leaf component customization.\r\n *\r\n * @param {string} name: name of the slot\r\n * @param {object} parameters\r\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\r\n *\r\n * Note: the returned slot's props\r\n * - will never contain `component` prop.\r\n * - might contain `as` prop.\r\n */\r\nexport default function useSlot(\r\n/**\r\n * The slot's name. All Material UI components should have `root` slot.\r\n *\r\n * If the name is `root`, the logic behaves differently from other slots,\r\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\r\n */\r\nname, parameters) {\r\n  const {\r\n    className,\r\n    elementType: initialElementType,\r\n    ownerState,\r\n    externalForwardedProps,\r\n    internalForwardedProps,\r\n    ...useSlotPropsParams\r\n  } = parameters;\r\n  const {\r\n    component: rootComponent,\r\n    slots = {\r\n      [name]: undefined\r\n    },\r\n    slotProps = {\r\n      [name]: undefined\r\n    },\r\n    ...other\r\n  } = externalForwardedProps;\r\n  const elementType = slots[name] || initialElementType;\r\n\r\n  // `slotProps[name]` can be a callback that receives the component's ownerState.\r\n  // `resolvedComponentsProps` is always a plain object.\r\n  const resolvedComponentsProps = resolveComponentProps(slotProps[name], ownerState);\r\n  const {\r\n    props: {\r\n      component: slotComponent,\r\n      ...mergedProps\r\n    },\r\n    internalRef\r\n  } = mergeSlotProps({\r\n    className,\r\n    ...useSlotPropsParams,\r\n    externalForwardedProps: name === 'root' ? other : undefined,\r\n    externalSlotProps: resolvedComponentsProps\r\n  });\r\n  const ref = useForkRef(internalRef, resolvedComponentsProps?.ref, parameters.ref);\r\n  const LeafComponent = name === 'root' ? slotComponent || rootComponent : slotComponent;\r\n  const props = appendOwnerState(elementType, {\r\n    ...(name === 'root' && !rootComponent && !slots[name] && internalForwardedProps),\r\n    ...(name !== 'root' && !slots[name] && internalForwardedProps),\r\n    ...mergedProps,\r\n    ...(LeafComponent && {\r\n      as: LeafComponent\r\n    }),\r\n    ref\r\n  }, ownerState);\r\n  return [elementType, props];\r\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,OAAOC,qBAAqB,MAAM,kCAAkC;AACpE,OAAOC,cAAc,MAAM,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAOA;AAC/B;AACA;AACA;AACA;AACA;AACA;AACAC,IAAI,EAAEC,UAAU,EAAE;EAChB,MAAM;IACJC,SAAS;IACTC,WAAW,EAAEC,kBAAkB;IAC/BC,UAAU;IACVC,sBAAsB;IACtBC,sBAAsB;IACtB,GAAGC;EACL,CAAC,GAAGP,UAAU;EACd,MAAM;IACJQ,SAAS,EAAEC,aAAa;IACxBC,KAAK,GAAG;MACN,CAACX,IAAI,GAAGY;IACV,CAAC;IACDC,SAAS,GAAG;MACV,CAACb,IAAI,GAAGY;IACV,CAAC;IACD,GAAGE;EACL,CAAC,GAAGR,sBAAsB;EAC1B,MAAMH,WAAW,GAAGQ,KAAK,CAACX,IAAI,CAAC,IAAII,kBAAkB;;EAErD;EACA;EACA,MAAMW,uBAAuB,GAAGlB,qBAAqB,CAACgB,SAAS,CAACb,IAAI,CAAC,EAAEK,UAAU,CAAC;EAClF,MAAM;IACJW,KAAK,EAAE;MACLP,SAAS,EAAEQ,aAAa;MACxB,GAAGC;IACL,CAAC;IACDC;EACF,CAAC,GAAGrB,cAAc,CAAC;IACjBI,SAAS;IACT,GAAGM,kBAAkB;IACrBF,sBAAsB,EAAEN,IAAI,KAAK,MAAM,GAAGc,KAAK,GAAGF,SAAS;IAC3DQ,iBAAiB,EAAEL;EACrB,CAAC,CAAC;EACF,MAAMM,GAAG,GAAG1B,UAAU,CAACwB,WAAW,EAAEJ,uBAAuB,EAAEM,GAAG,EAAEpB,UAAU,CAACoB,GAAG,CAAC;EACjF,MAAMC,aAAa,GAAGtB,IAAI,KAAK,MAAM,GAAGiB,aAAa,IAAIP,aAAa,GAAGO,aAAa;EACtF,MAAMD,KAAK,GAAGpB,gBAAgB,CAACO,WAAW,EAAE;IAC1C,IAAIH,IAAI,KAAK,MAAM,IAAI,CAACU,aAAa,IAAI,CAACC,KAAK,CAACX,IAAI,CAAC,IAAIO,sBAAsB,CAAC;IAChF,IAAIP,IAAI,KAAK,MAAM,IAAI,CAACW,KAAK,CAACX,IAAI,CAAC,IAAIO,sBAAsB,CAAC;IAC9D,GAAGW,WAAW;IACd,IAAII,aAAa,IAAI;MACnBC,EAAE,EAAED;IACN,CAAC,CAAC;IACFD;EACF,CAAC,EAAEhB,UAAU,CAAC;EACd,OAAO,CAACF,WAAW,EAAEa,KAAK,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}